const fs = require("fs"); const path = require("path"); const matter = require("gray-matter"); const TASKS_DIR = path.join(process.cwd(), "tasks"); const files = fs.readdirSync(TASKS_DIR).filter(file => file.endsWith(".md")); const tagStats = { uniqueTags: new Set(), tagFrequency: {}, tagsByEpic: {}, coOccurrence: {}, tagsByDate: {}, tasksByTag: {} }; files.forEach(file => { const content = fs.readFileSync(path.join(TASKS_DIR, file), "utf8"); const { data } = matter(content); const { tags = [], epic, created } = data; if (!tags.length) return; tags.forEach(tag => tagStats.uniqueTags.add(tag)); tags.forEach(tag => { tagStats.tagFrequency[tag] = (tagStats.tagFrequency[tag] || 0) + 1; if (!tagStats.tasksByTag[tag]) tagStats.tasksByTag[tag] = []; tagStats.tasksByTag[tag].push({ file, title: data.title, epic, created }); }); if (epic) { if (!tagStats.tagsByEpic[epic]) tagStats.tagsByEpic[epic] = new Set(); tags.forEach(tag => tagStats.tagsByEpic[epic].add(tag)); } tags.forEach(tag1 => { if (!tagStats.coOccurrence[tag1]) tagStats.coOccurrence[tag1] = {}; tags.forEach(tag2 => { if (tag1 !== tag2) { tagStats.coOccurrence[tag1][tag2] = (tagStats.coOccurrence[tag1][tag2] || 0) + 1; } }); }); if (created) { const date = created.split("T")[0]; if (!tagStats.tagsByDate[date]) tagStats.tagsByDate[date] = new Set(); tags.forEach(tag => tagStats.tagsByDate[date].add(tag)); } }); tagStats.uniqueTags = Array.from(tagStats.uniqueTags); Object.keys(tagStats.tagsByEpic).forEach(epic => { tagStats.tagsByEpic[epic] = Array.from(tagStats.tagsByEpic[epic]); }); Object.keys(tagStats.tagsByDate).forEach(date => { tagStats.tagsByDate[date] = Array.from(tagStats.tagsByDate[date]); }); const sortedTags = Object.entries(tagStats.tagFrequency).sort(([,a], [,b]) => b - a); const report = { summary: { totalUniqueTags: tagStats.uniqueTags.length, totalTaggedTasks: Object.values(tagStats.tagFrequency).reduce((a, b) => a + b, 0), mostUsedTags: sortedTags.slice(0, 10), epicsWithMostTags: Object.entries(tagStats.tagsByEpic).sort(([,a], [,b]) => b.length - a.length).slice(0, 5) }, details: tagStats }; fs.writeFileSync("tag-analysis.json", JSON.stringify(report, null, 2)); console.log("
Tag Analysis Summary:"); console.log("===================="); console.log(`Total unique tags: ${report.summary.totalUniqueTags}`); console.log(`Total tagged tasks: ${report.summary.totalTaggedTasks}`); console.log("
Most used tags:"); report.summary.mostUsedTags.forEach(([tag, count]) => { console.log(`${tag}: ${count} tasks`); }); console.log("
Epics with most tags:"); report.summary.epicsWithMostTags.forEach(([epic, tags]) => { console.log(`${epic}: ${tags.length} tags`); });
